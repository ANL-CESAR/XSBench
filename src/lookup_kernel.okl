typedef struct{
  double energy;
  double total_xs;
  double elastic_xs;
  double absorbtion_xs;
  double fission_xs;
  double nu_fission_xs;
} NuclideGridPoint;

typedef struct{
  double energy;
  int xs_ptrs;
} GridPoint;


occaFunction double rn(unsigned long int * seed) {
  double ret;
  unsigned long int n1;
  unsigned long int a = 16807;
  unsigned long int m = 2147483647;
  n1 = ( a * (*seed) ) % m;
  *seed = n1;
  ret = (double) n1 / m;
  return ret;
}

/*
   occaFunction unsigned int hash(unsigned char *str, int nbins)
   {
   unsigned int hash = 5381;
   int c;

   while (c = *str++)
   hash = ((hash << 5) + hash) + c;

   return hash % nbins;
   }
 */


occaFunction long grid_search( const long int n, const double quarry, GridPoint * restrict A) {
  long int lowerLimit = 0;
  long int upperLimit = n-1;
  long int examinationPoint;
  long int length = upperLimit - lowerLimit;

  while( length > 1 )
  {
    examinationPoint = lowerLimit + ( length / 2 );

    // Some optimizations exist in CUDA XSBench but are not included here
    if( A[examinationPoint].energy > quarry )
      upperLimit = examinationPoint;
    else
      lowerLimit = examinationPoint;

    length = upperLimit - lowerLimit;
  }

  return lowerLimit;
}

occaFunction int pick_mat( unsigned long int * seed ) {
  // I have a nice spreadsheet supporting these numbers. They are
  // the fractions (by volume) of material in the core. Not a 
  // *perfect* approximation of where XS lookups are going to occur,
  // but this will do a good job of biasing the system nonetheless.

  // Also could be argued that doing fractions by weight would be 
  // a better approximation, but volume does a good enough job for now.

  double dist[12];
  dist[0]  = 0.140;	// fuel
  dist[1]  = 0.052;	// cladding
  dist[2]  = 0.275;	// cold, borated water
  dist[3]  = 0.134;	// hot, borated water
  dist[4]  = 0.154;	// RPV
  dist[5]  = 0.064;	// Lower, radial reflector
  dist[6]  = 0.066;	// Upper reflector / top plate
  dist[7]  = 0.055;	// bottom plate
  dist[8]  = 0.008;	// bottom nozzle
  dist[9]  = 0.015;	// top nozzle
  dist[10] = 0.025;	// top of fuel assemblies
  dist[11] = 0.013;	// bottom of fuel assemblies

  //double roll = (double) rand() / (double) RAND_MAX;
  const double roll = rn(seed);

  // makes a pick based on the distro
  for( int i = 0; i < 12; i++ )
  {
    double running = 0;
    for( int j = i; j > 0; j-- )
      running += dist[j];
    if( roll < running )
      return i;
  }

  return 0;
}

occaKernel void lookup_kernel(
    int * num_nucs,
    GridPoint * restrict energy_grid,
    int * grid_ptrs,
    NuclideGridPoint * restrict nuclide_vector,
    int * restrict mats,
    int * restrict mats_idx,
    double * restrict concs,
    const long int total_lookups,
    const long int n_isotopes,
    const long int n_gridpoints,
    double *V_sums,
    unsigned long int *L_sums
    ) {

  for(int outer_id=0; outer_id<outer_dim; ++outer_id; outer0) {

    // A cache per outer unit.  Each inner unit i writes to V_sums_cache[i]
    shared double            V_sums_cache[inner_dim];
    shared unsigned long int L_sums_cache[inner_dim];

    for (int inner_id=0; inner_id<inner_dim; ++inner_id; inner0) {

      // Variables declared in the scope of an InnerFor loop are register variables
      const int global_id = outer_id*inner_dim + inner_id;
      unsigned long int seed = global_id*10000 + 1;

      double            inner_V_sum = 0;
      unsigned long int inner_L_sum = 0;

      for (long int i=global_id; i < total_lookups; i += occaGlobalDim0) {

        /*
        // Randomly pick energy and material
        const double p_energy = rn(&seed);
        const int mat = pick_mat(&seed); 

        // Initialize macro_xs_vector
        double macro_xs_vector[5];
        for( int k = 0; k < 5; k++ )
          macro_xs_vector[k] = 0;

        // Search for energy on energy grid
        const long int idx = grid_search(n_isotopes * n_gridpoints, p_energy, energy_grid);	

        // For each nuclide in this material
        for( int j = 0; j < num_nucs[mat]; j++ ) {

          //===== BEGIN: calculate micro xs

          // Get this nuclide and its concentration
          const int nuc     =  mats[mats_idx[mat] + j];
          const double conc = concs[mats_idx[mat] + j];

          // Get pointers to bounding values on nuclide energy grid
          NuclideGridPoint *low, *high;
          if( grid_ptrs[energy_grid[idx].xs_ptrs + nuc] == n_gridpoints - 1 )
            low = &nuclide_vector[(nuc * n_gridpoints) + grid_ptrs[energy_grid[idx].xs_ptrs + nuc] - 1];
          else
            low = &nuclide_vector[(nuc * n_gridpoints) + grid_ptrs[energy_grid[idx].xs_ptrs + nuc]];
          high = low + 1;

          // Get interpolation factors
          const double f = (high->energy - p_energy) / (high->energy - low->energy);

          // Interpolate micro xs for all interactions
          double micro_xs_vector[5];
          micro_xs_vector[0] = high->total_xs - f * (high->total_xs - low->total_xs);
          micro_xs_vector[1] = high->elastic_xs - f * (high->elastic_xs - low->elastic_xs);
          micro_xs_vector[2] = high->absorbtion_xs - f * (high->absorbtion_xs - low->absorbtion_xs);
          micro_xs_vector[3] = high->fission_xs - f * (high->fission_xs - low->fission_xs);
          micro_xs_vector[4] = high->nu_fission_xs - f * (high->nu_fission_xs - low->nu_fission_xs);

          // Accumlate micro xs into macro xs
          for( int k = 0; k < 5; k++ )
            macro_xs_vector[k] += micro_xs_vector[k] * conc;

        } // materials loop

        // Accumulate verification sum
        inner_V_sum += (mat + p_energy + macro_xs_vector[0] +
            macro_xs_vector[1] + macro_xs_vector[2] + macro_xs_vector[3] +
            macro_xs_vector[4]);
        */

        // Increment number of lookups
        ++inner_L_sum;

      } // lookup loop

      V_sums_cache[inner_id] = inner_V_sum;
      L_sums_cache[inner_id] = inner_L_sum;

    } //inner 0

    barrier(localMemFence);

    for (int i=inner_dim/2; i != 0; i /= 2) {
      for (int inner_id=0; inner_id<inner_dim; ++inner_id; inner0) {

        // Naive reduction
        if (inner_id < i && inner_id + i < inner_dim) {
          V_sums_cache[inner_id] += V_sums_cache[inner_id + i];
          L_sums_cache[inner_id] += L_sums_cache[inner_id + i];
        }
      }

      barrier(localMemFence);
    } //inner 0

    for (int inner_id=0; inner_id<inner_dim; ++inner_id; inner0) {
      if (inner_id == 0) {
        V_sums[outer_id] = V_sums_cache[0];
        L_sums[outer_id] = L_sums_cache[0];
      }
    } // inner 0

  } // outer0


}


