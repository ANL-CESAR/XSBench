#===============================================================================
# User Options
#===============================================================================

RAJA_PATH ?=${SPACK_ENV}/.spack-env/view/
# RAJA_PATH ?= /g/g90/harshita/wsb/workspace/raja-suite-tutorial/build/tpl/raja/
RAJA_INCLUDE_DIR = $(RAJA_PATH)/include
RAJA_LIB_DIR = $(RAJA_PATH)/lib

Umpire_PATH ?=${SPACK_ENV}/.spack-env/view/
# Umpire_PATH ?= /g/g90/harshita/wsb/workspace/raja-suite-tutorial/build/tpl/Umpire/
Umpire_INCLUDE_DIR = $(Umpire_PATH)/include
Umpire_LIB_DIR = $(Umpire_PATH)/lib



CUDA_PATH   ?= ${ROCM_PATH}
COMPILER    ?= hip
OPTIMIZE    ?= yes
DEBUG       ?= no
PROFILE     ?= no
MPI         ?= no
RAJA_DEVICES ?= Cuda#OpenMP#,Cuda
RAJA_ARCH ?= Power9# Zen3,Ampere80
SM_VERSION ?= 70

#===============================================================================
# Program name & source code list
#===============================================================================

program = XSBench

source = \
Main.cpp \
io.cpp \
Simulation.cpp \
GridInit.cpp \
XSutils.cpp \
Materials.cpp

obj = $(source:.cpp=.o)

#===============================================================================
# Sets Flags
#===============================================================================

# Standard Flags
CXXFLAGS := #-Wall

# Linker Flags
LDFLAGS = -lm

# HIP Compiler
ifeq ($(COMPILER),hip)
  CXX = hipcc
  CXXFLAGS +=  -std=c++17 -DHIP_EXEC
endif

# NVIDIA Compiler
ifeq ($(COMPILER),nvidia)
  #CXX = ${RAJA_PATH}/bin/nvcc_wrapper
  #CXXFLAGS += -ccbin nvc++ -Xcompiler -Wall -Xcompiler -O3 -arch=sm_$(SM_VERSION)
  CXX = nvcc#RAJA_PATH}/bin/nvcc_wrapper
  CXXFLAGS +=  -forward-unknown-to-host-compiler -ccbin=/usr/tce/packages/gcc/gcc-8.3.1/bin/c++ -x cu -Xcompiler -O3 --extended-lambda -arch=sm_$(SM_VERSION) 

  # CXXFLAGS +=  -forward-unknown-to-host-compiler -ccbin=/usr/tce/packages/gcc/gcc-8.3.1/bin/c++ -Xcompiler=-fPIE -std=c++14 -x cu -O3 --extended-lambda -arch=sm_$(SM_VERSION) 
endif

# Clang Compiler
ifeq ($(COMPILER),llvm)
  CXX = clang++
  CXXFLAGS += -flto -fopenmp -DOPENMP
endif

# GCC Compiler
ifeq ($(COMPILER),gnu)
  ifneq (,$(findstring Cuda,$(RAJA_DEVICES)))
    CXX = nvcc#RAJA_PATH}/bin/nvcc_wrapper
    CXXFLAGS += -arch=sm_$(SM_VERSION) 
  else
    CXX = g++
    CXXFLAGS += -flto -fopenmp -DOPENMP
  endif
endif


# Debug Flags
ifeq ($(DEBUG),yes)
  CXXFLAGS += -g
  LDFLAGS  += -g
ifeq ($(COMPILER),nvidia)
  CXXFLAGS += -G
  LDFLAGS  += -G
endif
endif

# Profiling Flags
ifeq ($(PROFILE),yes)
  CXXFLAGS += -pg
  LDFLAGS  += -pg
endif

# Optimization Flags
ifeq ($(OPTIMIZE),yes)
  CXXFLAGS += -O3
endif

# MPI
ifeq ($(MPI),yes)
  CXX = mpicxx
  CXXFLAGS += -DMPI
endif

#===============================================================================
# Targets to Build
#===============================================================================

default: $(program)

#include $(RAJA_PATH)/Makefile.kokkos
RAJA_LIBS = -lRAJA
RAJA_LDFLAGS = -L$(RAJA_LIB_DIR)
RAJA_CXXFLAGS = -I./ -I$(RAJA_INCLUDE_DIR)

Umpire_LIBS = -lumpire -lcamp
Umpire_LDFLAGS = -L$(Umpire_LIB_DIR)
Umpire_CXXFLAGS = -I./ -I$(Umpire_INCLUDE_DIR)

CUDA_LDFLAGS = -L$(CUDA_PATH)/lib
CUDA_CXXFLAGS = -I./ -I$(CUDA_PATH)/include

$(program): $(obj) XSbench_header.hpp Makefile
	$(CXX) --offload-arch=gfx906:sramecc+:xnack- $(RAJA_LDFLAGS) $(Umpire_LDFLAGS) $(CUDA_LDFLAGS) $(obj) $(RAJA_LIBS) $(Umpire_LIBS) -o $@ $(LDFLAGS)

%.o: %.cpp XSbench_header.hpp Makefile $(RAJA_CPP_DEPENDS)
	$(CXX) --offload-arch=gfx906:sramecc+:xnack- $(RAJA_CXXFLAGS) $(Umpire_CXXFLAGS) $(CUDA_CXXFLAGS) $(CXXFLAGS) -c $< -o $@

clean:
	rm -rf $(program) $(obj) *.tmp 

edit:
	vim -p $(source) XSbench_header.hpp

run:
	./$(program)
